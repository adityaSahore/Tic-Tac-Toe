{"version":3,"sources":["square.js","patterns.js","App.js","reportWebVitals.js","index.js"],"names":["Square","val","chooseSquare","Fragment","className","onClick","Patterns","App","useState","board","setBoard","player","setPlayer","winner","state","result","setResult","useEffect","checkTied","checkWin","alert","restartGame","square","map","idx","filled","forEach","currPattern","firstPlayer","foundWinningPattern","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4775d1bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction Square({ val, chooseSquare }) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"square\" onClick={chooseSquare}>\r\n        {val}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","export const Patterns = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Square from \"./square\";\nimport { Patterns } from \"./patterns\";\n\nfunction App() {\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [player, setPlayer] = useState(\"O\");\n  const [result, setResult] = useState({ winner: \"none\", state: \"none\" });\n\n  useEffect(() => {\n    checkTied();\n    checkWin();\n    if (player == \"X\") {\n      setPlayer(\"O\");\n    } else {\n      setPlayer(\"X\");\n    }\n  }, [board]);\n  useEffect(() => {\n    if (result.state != \"none\") {\n      alert(`${result.winner} won`);\n      restartGame();\n    }\n  }, [result]);\n\n  const chooseSquare = (square) => {\n    setBoard(\n      board.map((val, idx) => {\n        if (idx == square && val == \"\") {\n          return player;\n        }\n        return val;\n      })\n    );\n  };\n\n  const checkTied = () => {\n    let filled = true;\n    board.forEach((square) => {\n      if (square == \"\") {\n        filled = false;\n      }\n    });\n    if (filled) {\n      setResult({ winner: \"Neither Player\", state: \"Tied!!!\" });\n    }\n  };\n\n  const checkWin = () => {\n    Patterns.forEach((currPattern) => {\n      const firstPlayer = board[currPattern[0]];\n      if (firstPlayer == \"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach((idx) => {\n        if (board[idx] != firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n      if (foundWinningPattern) {\n        setResult({ winner: player, state: \"won\" });\n      }\n    });\n  };\n\n  const restartGame = () => {\n    setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    setPlayer([\"O\"]);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"board\">\n        <div className=\"row\">\n          <Square\n            val={board[0]}\n            chooseSquare={() => {\n              chooseSquare(0);\n            }}\n          />\n          <Square\n            val={board[1]}\n            chooseSquare={() => {\n              chooseSquare(1);\n            }}\n          />\n          <Square\n            val={board[2]}\n            chooseSquare={() => {\n              chooseSquare(2);\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <Square\n            val={board[3]}\n            chooseSquare={() => {\n              chooseSquare(3);\n            }}\n          />\n          <Square\n            val={board[4]}\n            chooseSquare={() => {\n              chooseSquare(4);\n            }}\n          />\n          <Square\n            val={board[5]}\n            chooseSquare={() => {\n              chooseSquare(5);\n            }}\n          />\n        </div>\n        <div className=\"row\">\n          <Square\n            val={board[6]}\n            chooseSquare={() => {\n              chooseSquare(6);\n            }}\n          />\n          <Square\n            val={board[7]}\n            chooseSquare={() => {\n              chooseSquare(7);\n            }}\n          />\n          <Square\n            val={board[8]}\n            chooseSquare={() => {\n              chooseSquare(8);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}